/*
* Copyright (c) 2019 Apple Inc. All rights reserved.
*
* @APPLE_LICENSE_HEADER_START@
*
* This file contains Original Code and/or Modifications of Original Code
* as defined in and that are subject to the Apple Public Source License
* Version 2.0 (the 'License'). You may not use this file except in
* compliance with the License. Please obtain a copy of the License at
* http://www.opensource.apple.com/apsl/ and read it before using this
* file.
*
* The Original Code and all software distributed under the License are
* distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
* EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
* INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
* Please see the License for the specific language governing rights and
* limitations under the License.
*
* @APPLE_LICENSE_HEADER_END@
*/

#ifndef IOUserSCSIParallelInterfaceController_h
#define IOUserSCSIParallelInterfaceController_h

#include <TargetConditionals.h>

#if TARGET_OS_DRIVERKIT
#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include <DriverKit/storage/SCSITask.h>
#include <DriverKit/storage/SCSICmds_REQUEST_SENSE_Defs.h>
#include <DriverKit/OSDictionary.iig>
#include <DriverKit/IOBufferMemoryDescriptor.iig>
#include <SCSIControllerDriverKit/IOSCSIParallelControllerCharacteristics.h>
#else
#include <IOKit/scsi/SCSITask.h>
#include <IOKit/scsi/SCSICmds_REQUEST_SENSE_Defs.h>
#include <DriverKit/IOBufferMemoryDescriptor.iig>
#include <DriverKit/IOService.iig>
#include <DriverKit/OSAction.iig>
#include "IOSCSIParallelControllerCharacteristics.h"
#endif

/*

Below section describes the usage of bundled parallel task APIs:

- UserMapBundledParallelTaskCommandAndResponseBuffers
- UserProcessBundledParallelTasks
- BundledParallelTaskCompletion
- UserCompleteBundledParallelTask

To optimize the interaction between the framework and dext, framework
allocates command and response buffers which can be mapped in the dext
address space when framework calls UserMapBundledParallelTaskCommandAndResponseBuffers.
The bundled I/O APIs allow exchange of multiple commands or responses in one
call. And due to shared command and response buffers, it avoids copying the payload
during the interaction between the framework and dext.

Dext can choose to not map these buffers and return kIOReturnFailure
in UserMapBundledParallelTaskCommandAndResponseBuffers, and then framework
will use UserProcessParallelTask and UserCompleteParallelTask to process I/Os.
But if dext returns kIOReturnSuccess, then framework will use
UserProcessBundledParallelTasks and UserCompleteBundledParallelTask to process
the I/Os.

Framework creates contiguous command and response buffers which can be mapped in
dext address sapce and passes the buffer slot indices in the bundled task APIs.
These APIs can handle upto kMaxBundledParallelTasks commands or responses in one
invocation.  Dext can use the buffer slot number to index into the mapped command
and response regions to access the corresonding payload. There is one to one
mapping between command and response buffers, i.e. if framework assigns
buffer slot number 12 to a command, then dext should use slot number 12
in the mapped response buffers during I/O completion.

When dext starts, all the shared command and response buffers ownership
is with the framework. Dext should access command and response buffers in
any slot only when it has the ownership of that slot. Framework passes the
ownership of a slot to dext via UserProcessBundledParallelTasks and
dext passes the ownership back to the framework via UserCompleteBundledParallelTask.

Below example demonstrates bundled parallel task API flow and buffer ownership:


[ Framework ]                                        [ Dext ]
-------------                                        --------

  .
  .
  ReportMaximumTaskCount -->
                                                      <-- 128 Max Tasks
  .
  .
  UserMapBundledParallelTaskCommandAndResponseBuffers -->
                                                      <-- kIOReturnSuccess
  .
  .
  UserStartController -->
                                                      <-- kIOReturnSuccess
  .
  .
  .
  UserProcessBundledParallelTasks -->
  [ parallelRequestSlotIndices = (0) parallelRequestSlotIndicesCount = (1) ]


  UserProcessBundledParallelTasks -->
  [ parallelRequestSlotIndices = (2,5,18) parallelRequestSlotIndicesCount = (3) ]

  .

                                     <-- UserCompleteBundledParallelTask
                                        [ parallelResponseSlotIndices = (0) parallelResponseSlotIndicesCount = (1) ]


                                     <-- UserCompleteBundledParallelTask
                                        [ parallelResponseSlotIndices = (2,5) parallelResponseSlotIndicesCount = (2) ]


  .
  .

  UserProcessBundledParallelTasks -->
  [ parallelRequestSlotIndices = (0,10,11,12,15) parallelRequestSlotIndicesCount = (5) ]

  .

                                     <-- UserCompleteBundledParallelTask
                                        [ parallelResponseSlotIndices = (18,0) parallelResponseSlotIndicesCount = (2) ]
  .
  .

                                     <-- UserCompleteBundledParallelTask
                                        [ parallelResponseSlotIndices = (10,11,12) parallelResponseSlotIndicesCount = (3) ]
  .
  .

                                     <-- UserCompleteBundledParallelTask
                                        [ parallelResponseSlotIndices = (15) parallelResponseSlotIndicesCount = (1) ]

*/


#define kMaxSenseBufferSize				256
#define kIOServicePowerCapabilityPause	0x1000
#define kMaxBundledParallelTasks        32

typedef enum SCSIUserParallelTaskVersion
{
	kScsiUserParallelTaskCurrentVersion1 = 1
} SCSIUserParallelTaskVersion;

typedef enum SCSIUserParallelResponseVersion {
	kScsiUserParallelTaskResponseCurrentVersion1 = 1
} SCSIUserParallelResponseVersion;


typedef struct SCSIUserParallelTask
{
    uint64_t                                version;
    SCSITargetIdentifier                    fTargetID;
    uint32_t								fSCSIParallelFeatureRequest[kSCSIParallelFeature_TotalFeatureCount];
    uint64_t								fSCSIParallelFeatureRequestCount;
    uint64_t								fControllerTaskIdentifier;
    uint64_t								fRequestedTransferCount;
    uint64_t                    			fBufferIOVMAddr;
    SCSITaskAttribute           			fTaskAttribute;
    uint64_t                    			fTaskTagIdentifier;
    SCSILogicalUnitBytes        			fLogicalUnitBytes;
    SCSICommandDescriptorBlock  			fCommandDescriptorBlock;
    uint8_t                     			fCommandSize;
    uint8_t                     			fTransferDirection;
	uint32_t								fTimeoutInMilliSec;
    uint8_t                                 reserved[6];
} SCSIUserParallelTask;

typedef struct SCSIUserParallelResponse
{
    uint64_t                                version;
    SCSITargetIdentifier                    fTargetID;
    uint32_t								fSCSIParallelFeatureResult[kSCSIParallelFeature_TotalFeatureCount];
    uint64_t                    			fSCSIParallelFeatureRequestResultCount;
	uint64_t								fControllerTaskIdentifier;
	SCSITaskStatus							fCompletionStatus;
	SCSIServiceResponse						fServiceResponse;
	uint64_t								fBytesTransferred;
	uint8_t									fSenseLength;
	uint8_t									fSenseBuffer[kMaxSenseBufferSize];
	uint8_t									reserved[51];
} SCSIUserParallelResponse;

typedef enum DMAOutputSegmentType : uint16_t
{
	
	// IODMACommand will use host natural Segment32 output segment function.
	kDMAOutputSegmentHost32 		= 0,
	
	// IODMACommand will use big-endian Segment32 output segment function.
	kDMAOutputSegmentBig32			= 1,
	
	// IODMACommand will use little-endian Segment32 output segment function.
	kDMAOutputSegmentLittle32		= 2,
	
	// IODMACommand will use host natural Segment64 output segment function.
	kDMAOutputSegmentHost64			= 3,
	
	// IODMACommand will use big-endian Segment64 output segment function.
	kDMAOutputSegmentBig64			= 4,
	
	// IODMACommand will use little-endian Segment64 output segment function.
	kDMAOutputSegmentLittle64		= 5
	
} DMAOutputSegmentType;


/*!
 @iig implementation
 #if KERNEL
 #include "DriverKitKernelSupport/IOUserSCSIParallelInterfaceController.h"
 #endif
 @iig end
 */

class KERNEL IOUserSCSIParallelInterfaceController : public IOService
{
	
public:
	

    /*!
		@function ParallelTaskCompletion
		@abstract Type definition for asynchronous completion routines.
		@discussion Type definition for asynchronous completion routines. Dext class
		should use this method to complete an async request.
     	@param action Pointer to the OSAction object of the async request specified
		in UserProcessParallelTask.
     	@param response Result of the async request.
     	@result	void
     */
    virtual void
    ParallelTaskCompletion     ( OSAction *					action TARGET,
								 SCSIUserParallelResponse	response ) = 0;
    

    /*!
		@function UserTargetPresentForID
		@abstract Checks if a specific target is present.
		@discussion For a given target ID, dext class can call this method to check if
		it is actually present.
     	@param targetID ID of the target to check
     	@param result This is set to true by the framework if the target is present and
		false otherwise.
     	@result	kIOReturnSuccess on success. See IOReturn.h for error codes.
     */
	
    virtual kern_return_t
    UserTargetPresentForID ( SCSIDeviceIdentifier		targetID,
							 bool *						result );


    /*!
        @function UserCreateTargetForID
        @abstract Create a target.
        @discussion The dext class should call this method to create a new target for the
        targetID. The framework ensures that the new target is created before the call returns.
        Note that this call to the framework runs on the Auxiliary queue.
        @param targetID ID of the target to be created
        @param targetDict OSDictionary containing all the target properties.
        @result    kIOReturnSuccess on success. See IOReturn.h for error codes.
     */

    virtual kern_return_t
    UserCreateTargetForID ( SCSIDeviceIdentifier    targetID,
                            OSDictionary *          targetDict ) QUEUENAME ( AuxiliaryQueue );
	
	
	/*!
		@function UserGetDataBuffer
		@abstract Gets the data buffer associated with a particular IO request.
		@discussion The dext class can call this method inside UserProcessParallelTask to get
		the data buffer associated with that IO request. Only call this method if access to the data
		buffer is required. Calling this method can have a significant impact on performance. The
		caller will have to prepare new DMA mappings for this buffer and can no longer use the
		mappings in fBufferIOVMAddr.
		@param targetID ID of the target
		@param controllerTaskID task ID to uniquely identify this IO. This should be the same
		as fControllerTaskIdentifier  in the SCSIUserParallelTask structure.
		@param buffer returned IOBufferMemoryDescriptor object
		@result    kIOReturnSuccess on success. See IOReturn.h for error codes.
	 */

	virtual kern_return_t
	UserGetDataBuffer ( SCSIDeviceIdentifier    	targetID,
						uint64_t					controllerTaskID,
					    IOBufferMemoryDescriptor **	buffer );
	
    
	/*!
		@function UserReportHBAHighestLogicalUnitNumber
		@abstract Gets the Highest Logical Unit Number.
		@discussion	This method is used to query the dext class to determine
		what the highest Logical Unit Number that the controller can address.
		@param value pointer to hold the value.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserReportHBAHighestLogicalUnitNumber ( uint64_t *	value ) = 0;
    
	/*!
		@function UserDoesHBASupportSCSIParallelFeature
		@abstract Queries the dext class to determine if it supports a specific
		SPI feature.
		@discussion	Queries the dext class to determine if it supports the
		specified feature as defined by the SCSI Parallel Interconnect
		specifications.
		@param theValue SPI feature to check
		@param result boolean value to be filled out by the caller.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserDoesHBASupportSCSIParallelFeature ( uint32_t	theValue,
										    bool *		result ) = 0;
    
	/*!
		@function UserInitializeTargetForID
		@abstract Called to initialize a target device.
		@discussion	This method will be called to initialize a target device. The
		HBA can use this method to probe the target or do anything else necessary
		before the device object is registered with IOKit for matching.
		@param targetID target to initialize.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserInitializeTargetForID ( SCSITargetIdentifier	targetID ) = 0;
    
	/*!
		@function UserDoesHBAPerformAutoSense
		@abstract Queries the dext class to determine if it automatically performs
		AutoSense and provides AutoSense data for each I/O. If the HBA allocates
		space for AutoSense in its HBA specific data region on a per task basis, the
		HBA should respond true.
		@discussion	Queries the dext class to determine if it automatically performs
		AutoSense and provides AutoSense data for each I/O. If the HBA allocates
		space for AutoSense in its HBA specific data region on a per task basis, the
		HBA should respond true.
		@param result Caller should set this to true if HBA performs AutoSense.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserDoesHBAPerformAutoSense ( bool *	result ) = 0;
    
	/*!
		@function UserDoesHBASupportMultiPathing
		@abstract Queries the HBA child class to determine if it supports
		Multi-Pathing.
		@discussion Queries the HBA child class to determine if it supports
		Multi-Pathing.
		@param result Returns true if requested feature is supported.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
    
    virtual kern_return_t
    UserDoesHBASupportMultiPathing ( bool *	result  ) = 0;
    
    
	// The SCSI Task Management Functions as defined in the SCSI Architecture
	// Model - 2 (SAM-2) specification.  These are used by the client to request
	// the specified function.
	
    virtual kern_return_t
    UserAbortTaskRequest ( uint64_t			theT,
						   uint64_t			theL,
						   uint64_t			theQ,
						   uint32_t *		response ) = 0;
    
    virtual kern_return_t
    UserAbortTaskSetRequest ( uint64_t		theT,
							  uint64_t		theL,
							  uint32_t *	response ) = 0;
    
    virtual kern_return_t
    UserClearACARequest ( uint64_t		theT,
						  uint64_t		theL,
						  uint32_t *	response ) = 0;
    
    virtual kern_return_t
    UserClearTaskSetRequest ( uint64_t		theT,
							  uint64_t		theL,
							  uint32_t *	response ) = 0;
    
    virtual kern_return_t
    UserLogicalUnitResetRequest ( uint64_t		theT,
								  uint64_t		theL,
								  uint32_t *	response ) = 0;
    
    virtual kern_return_t
    UserTargetResetRequest ( uint64_t		theT,
							 uint32_t *		response ) = 0;
    
protected:
    
	/*!
		@function UserReportInitiatorIdentifier
		@abstract Get the SCSI Device Identifier for the HBA.
		@discussion This method will be called to determine the SCSI Device
		Identifier that the Initiator has assigned for this HBA.
		@param id The caller should set the value of the initiator identifier.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserReportInitiatorIdentifier ( uint64_t *		id ) = 0;
    
	/*!
		@function UserReportHighestSupportedDeviceID
		@abstract Get the highest supported SCSI Device Identifier.
		@discussion This method will be called to determine the value of the
		highest SCSI Device Identifier supported by the HBA. This value will be
		used to determine the last ID to process.
		@param id The caller should set this to the highest SCSIDeviceIdentifier.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserReportHighestSupportedDeviceID ( uint64_t *		id ) = 0;
    
	/*!
		@function UserReportMaximumTaskCount
		@abstract Report Maximum Task Count
		@discussion This method will be called to retrieve the maximum number of
		outstanding tasks the HBA can process. This number must be greater than
		zero or the controller driver will fail to match and load.
		@param count The caller should set this to the maximum task count.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserReportMaximumTaskCount ( uint32_t *		count ) = 0;
    
  	/*!
		@function UserDoesHBAPerformDeviceManagement
		@abstract  Determine if HBA will manage devices.
		@discussion This method is used to determine if the HBA will manage
		target device creation and destruction.
		@param result The caller should set this to true if it will manage target
		device creation.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserDoesHBAPerformDeviceManagement ( bool *		result ) = 0;
    
  	/*!
		@function UserInitializeController
		@abstract  Called to initialize the controller
		@discussion It is guaranteed that the UserInitializeController() will only be
		called once per instantiation.  The InitializeController() methods allows the
		dext driver to do all the necessary initialization required by the hardware
		before it is able to accept requests to execute. All necessary allocation of
		resources should be made during this method call. This is the first method
		that will be called in the dext.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserInitializeController ( ) = 0;
	
	/*!
		@function UserStartController
		@abstract Called to start the controller
		@discussion UserStartController( ) will always be called before any
		requests are sent to the driver for execution. This method is called after
		UserInitializeController( ) to start the services provided by the specific HBA
		dext driver. After this call completes, all services provided by the HBA driver
		are available to the client.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserStartController ( ) = 0;
	
	/*!
		@function UserProcessParallelTask
		@abstract Called by framework to process a parallel task.
		@discussion This method is called to process a parallel task (i.e. put
		the command on the bus). The framework will send all the information required
		to process the request in SCSIUserParallelTask. The HBA specific sublcass must
		implement this method.
		@param parallelRequest SCSIUserParallelTask object containing all
		the request information.
		@param response Service response for the request.
		@param completion OSAction object that the dext class should use to complete
		this request.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserProcessParallelTask ( SCSIUserParallelTask		parallelRequest,
							  uint32_t *				response,
							  OSAction *				completion TYPE ( ParallelTaskCompletion ) ) = 0;
    
	/*!
		@function UserGetDMASpecification
		@abstract Get controller specific DMA specification.
		@discussion This method is used to get controller specific DMA specification
		from the dext.
		@param maxTransferSize  Maximum allowed transfer size for the controller.
		@param alignment Required alignment for the controller.
		@param numAddressBits Number of bits that the hardware uses on its internal address bus.
		@param DMAOutputSegmentType Output segment type based on the endianness of the hardware.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserGetDMASpecification ( uint64_t *				maxTransferSize,
							  uint32_t *				alignment,
							  uint8_t *					numAddressBits,
							  DMAOutputSegmentType *	segmentType ) = 0;
	
	/*!
		@function UserMapHBAData
		@abstract Map any HBA specific task data.
		@discussion The dext class should override this and memory map and prepare
		any HBA specific task data for DMA. This method gets called for every
		SCSIParallelTask right after they get created in the kernel. The dext class should
		also set a task ID that is unique. This ID is used to uniquely identify the
		corresponding SCSIParallelTask in the kernel.
		@param uniqueTaskID  Unique ID for this task.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
    virtual kern_return_t
    UserMapHBAData ( uint32_t *		uniqueTaskID ) = 0;
	
	/*!
	   @function UserDestroyTargetForID
	   @abstract Destroy the target.
	   @discussion The dext class should call this method to remove the target with the
	   specified targetID.
	   @param targetID ID of the target to be destroyed
	   @result    kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/

	virtual kern_return_t
	UserDestroyTargetForID ( SCSITargetIdentifier	targetID );

	/*!
		@function UserSetHBAProperties
		@abstract Accessor for setting a set of properties for this object.
		@param properties A dictionary containing key value pairs of properties.
		A list of valid keys includes:
			kIOPropertyVendorNameKey,
			kIOPropertyProductNameKey,
			kIOPropertyProductRevisionLevelKey,
			kIOPropertyPortDescriptionKey,
			kIOPropertyPortSpeedKey,
			kIOPropertyPortTopologyKey,
			kIOPropertySCSIParallelSignalingTypeKey,
			kIOPropertyFibreChannelCableDescriptionKey,
			kIOPropertyFibreChannelNodeWorldWideNameKey,
			kIOPropertyFibreChannelPortWorldWideNameKey,
			kIOPropertyFibreChannelAddressIdentifierKey,
			kIOPropertyFibreChannelALPAKey, and
			kIOPropertySASAddressKey.
		The value should be a pointer to a valid OSString object which represents value for
		the property. The value must be of the proper type, and/or size for the specified key.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
	virtual kern_return_t
	UserSetHBAProperties ( OSDictionary *	properties ) ;
	
	/*!
		@function UserRemoveHBAProperties
		@abstract Accessor for removing the property from this object.
		@param properties An array containing keys of the properties to be removed.
		A list of valid keys includes:
			kIOPropertyVendorNameKey,
			kIOPropertyProductNameKey,
			kIOPropertyProductRevisionLevelKey,
			kIOPropertyPortDescriptionKey,
			kIOPropertyPortSpeedKey,
			kIOPropertyPortTopologyKey,
			kIOPropertySCSIParallelSignalingTypeKey,
			kIOPropertyFibreChannelCableDescriptionKey,
			kIOPropertyFibreChannelNodeWorldWideNameKey,
			kIOPropertyFibreChannelPortWorldWideNameKey,
			kIOPropertyFibreChannelAddressIdentifierKey,
			kIOPropertyFibreChannelALPAKey, and
			kIOPropertySASAddressKey.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
	virtual kern_return_t
	UserRemoveHBAProperties ( OSArray *	properties );
	
	/*!
		@function UserSetTargetProperties
		@abstract Accessor for setting a set of properties for a specific target.
		@param targetID ID of the specific target.
		@param properties A dictionary containing key value pairs of properties.
		A list of valid keys includes:
			kIOPropertySASAddressKey,
			kIOPropertyFibreChannelNodeWorldWideNameKey,
			kIOPropertyFibreChannelPortWorldWideNameKey,
			kIOPropertyFibreChannelAddressIdentifierKey, and
			kIOPropertyFibreChannelALPAKey.
		The value should be a pointer to a valid OSString object which represents value for
		the property. The value must be of the proper type, and/or size for the specified key.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
	virtual kern_return_t
	UserSetTargetProperties ( SCSIDeviceIdentifier 		targetID,
							  OSDictionary *			properties );
	
	/*!
		@function UserRemoveTargetProperties
		@abstract Accessor for removing a property from a specific target.
		@param targetID ID of the specific target.
		@param properties An array containing keys of the properties to be removed.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
	virtual kern_return_t
	UserRemoveTargetProperties ( SCSIDeviceIdentifier		targetID,
								 OSArray *					properties );
	
	/*!
		@function UserReportHBAConstraints
		@abstract Called to report the I/O constraints for this controller.
		A list of valid keys includes:
			kIOMaximumSegmentCountReadKey, (required)
			kIOMaximumSegmentCountWriteKey, (required)
			kIOMaximumSegmentByteCountReadKey, (required)
			kIOMaximumSegmentByteCountWriteKey, (required)
			kIOMinimumSegmentAlignmentByteCountKey, (required)
			kIOMaximumSegmentAddressableBitCountKey, (required)
			kIOMinimumHBADataAlignmentMaskKey (required)
			kIOHierarchicalLogicalUnitSupportKey (optional).
		NB: These keys and their values are described in this header and <DriverKit/IOKitKeys.h>
		@param constraints. An OSDictionary object used to aggregate the key/value pairs.
		Subclasses must set the required keys if they override this method. If a subclass does
		not provide the required keys, the system will panic. Subclasses must call this method from
		the dext before UserInitializeController() returns.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/
	
	virtual kern_return_t
	UserReportHBAConstraints ( OSDictionary * constraints );

	/*!
		@function UserCallMediaParametersHaveChanged
		@abstract Called to propagate change in media parameters.
		@result kIOReturnSuccess on success. See IOReturn.h for error codes.
	*/

	virtual kern_return_t
	UserCallMediaParametersHaveChanged ( void );


	/*!
		@function UserMapBundledParallelTaskCommandAndResponseBuffers
		@abstract Called by the framework to map the shared command and response
		buffers in the dext address space.
		@discussion To optimize the interaction with dext class, framework allocates
		contiguous command and response buffers to hold maximum number of tasks
		reported by UserReportMaximumTaskCount. The framework will call this method before
		UserStartController, so that dext class can map these buffers in the dext address space.
        The framework uses the shared buffers to pass command and response payloads.
		There is one to one mapping between command and response buffers and dext should
		use same slot number for related command and response payloads; example if framework
        assigns buffer slot number 12 to a command, then dext should use slot number 12 in
        the mapped response buffers during I/O completion.

		The shared buffer slots for both command and response are owned by the framework
		till it passes the ownership to the dext via UserProcessBundledParallelTasks.
		And dext has the ownership of both command and response buffers slots
		till it hands over the ownership back to the framework via BundledParallelTaskCompletion.
        Dext shouldn't access a command and response buffer slot unless framework has passed
        the ownership to the dext.

        If a dext doesn't want to use the shared buffers, it could choose to return
        kIOReturnFailure and continue to use UserProcessParallelTask and UserCompleteParallelTask
        to process the I/Os.
        If dext returns kIOReturnSuccess, framework expects the dext to use UserProcessBundledParallelTasks
        and UserCompleteBundledParallelTask.

		@param parallelCommandIOMemoryDescriptor The memory descriptor corresponding
		to the command buffers.
		@param parallelResponseIOMemoryDescriptor The memory descriptor corresponding
		to the response buffers.
		@result kIOReturnSuccess on success and kIOReturnFailure on failure.
	*/
	virtual kern_return_t
	UserMapBundledParallelTaskCommandAndResponseBuffers ( IOBufferMemoryDescriptor *    parallelCommandIOMemoryDescriptor,
														  IOBufferMemoryDescriptor *    parallelResponseIOMemoryDescriptor ) = 0;


	/*!
		@function BundledParallelTaskCompletion
		@abstract Type definition for asynchronous completion routine.
		@discussion Dext class should use this method to complete one or more requests it
        received via UserProcessBundledParallelTasks method.
		Dext class should populate SCSIUserParallelResponse for each request to be
		completed and make it available in the shared response buffers, and pass the response
        buffer slot indices in parameter parallelResponseSlotIndices.
		There is one to one mapping between command and response buffers and dext should
		use same slot number for related command and response payloads.
		@param action Pointer to the OSAction object of the async request specified
		in UserProcessBundledParallelTasks
		@param parallelResponseSlotIndices Contains indices of the shared response buffer
        slots containing SCSIUserParallelResponse for each task to be completed.
		@param parallelResponseSlotIndicesCount The number of tasks to be completed. The
        entries from zero to ( parallelResponseSlotIndicesCount - 1) in parameter
        parallelResponseSlotIndices should have valid indices.
		@result void
	*/
	virtual void
	BundledParallelTaskCompletion ( OSAction *					        action TARGET,
									const uint16_t                      parallelResponseSlotIndices[kMaxBundledParallelTasks],
									uint16_t                            parallelResponseSlotIndicesCount ) = 0;
    

	/*!
		@function UserProcessBundledParallelTasks
		@abstract Called by the framework to process one or more parallel tasks.
		@discussion This method is called to process one or more parallel tasks (i.e. put
		the commands on the bus ). The framework will populate SCSIUserParallelTask for each
		task and make it available in the shared command buffers which can be accessed by the
		command buffer slot indices passed in parallelRequestSlotIndices parameter.
		If dext is unable to process any commands, it should invoke BundledParallelTaskCompletion for
		such commands and the framework will complete those commands with the response provided
		by the dext.
        This method is called only when the dext has mapped command and response buffers in the dext
        address space succesfully in UserMapBundledParallelTaskCommandAndResponseBuffers.
		
		@param parallelRequestSlotIndices Contains indices of shared command buffer slots for
        the tasks to be processed. Entries from zero to ( parallelRequestSlotIndicesCount - 1 )
        have valid indices.
		@param parallelRequestSlotIndicesCount The number of tasks to be processed.
		@param completion OSAction object that the dext class should use to complete tasks.
		@result void
	*/

	virtual void
	UserProcessBundledParallelTasks ( const uint16_t	parallelRequestSlotIndices[kMaxBundledParallelTasks],
									  uint16_t			parallelRequestSlotIndicesCount,
									  OSAction *		completion TYPE ( BundledParallelTaskCompletion ) ) = 0;

};


class EXTENDS ( IOUserSCSIParallelInterfaceController ) IOUserSCSIParallelInterfaceControllerPrivate
{
	
	// Kernel implementation of asynchronous completion routines of type ParallelTaskCompletion.
	// SCSIUserParallelResponse version should match the current version in SCSIUserParallelResponseVersion enum and needs to be set by the dext.
	// If the SCSIUserParallelResponse version does not match, then this function will return without completing the I/O.
    virtual void
    UserCompleteParallelTask ( OSAction *				action,
                               SCSIUserParallelResponse	response )
							 KERNEL
                             TYPE(IOUserSCSIParallelInterfaceController::ParallelTaskCompletion);
    

	// Kernel implementation of the asynchronous completion routine of type BundledParallelTaskCompletion.
	// Used to process completion of multiple parallel tasks.
    // Should be used if dext has mapped shared command and response buffers in dext address space successfully in
    // UserMapBundledParallelTaskCommandAndResponseBuffers.
	virtual void
	UserCompleteBundledParallelTask ( OSAction *                            action,
									  const uint16_t                        parallelResponseSlotIndices[kMaxBundledParallelTasks],
									  uint16_t                              parallelResponseSlotIndicesCount )
									  KERNEL
									  TYPE(IOUserSCSIParallelInterfaceController::BundledParallelTaskCompletion);

    
};

#endif /* IOUserSCSIParallelInterfaceController_h */
